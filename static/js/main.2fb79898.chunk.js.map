{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","type","placeholder","className","onChange","handleInput","onKeyPress","search","Result","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","apiUrl","e","target","value","prevState","axios","then","data","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+NAeeA,MAbf,SAAgBC,GACf,OACC,iCACC,2BACCC,KAAK,OACLC,YAAY,wBACZC,UAAU,YACVC,SAAUJ,EAAMK,YAChBC,WAAYN,EAAMO,WCCPC,MATf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACzB,OACC,+BAAWP,UAAU,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UAC7D,yBAAKC,IAAKJ,EAAOK,OAAQC,IAAI,KAC7B,4BAAKN,EAAOO,SCOAC,MAVf,YAA0C,IAAvBC,EAAsB,EAAtBA,QAASR,EAAa,EAAbA,UAC3B,OACC,+BAAWP,UAAU,WACnBe,EAAQC,KAAI,SAAAV,GAAM,OAClB,kBAAC,EAAD,CAAQW,IAAKX,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,S,gBCgB5CW,MArBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC1B,OACC,6BAASpB,UAAU,SAClB,yBAAKA,UAAU,WACd,4BACEmB,EAASN,MACV,kCAAQM,EAASE,KAAjB,MAED,uBAAGrB,UAAU,UAAb,WAA+BmB,EAASG,YACxC,yBAAKtB,UAAU,QACd,yBAAKU,IAAKS,EAASR,OAAQC,IAAI,KAC/B,2BAAIO,EAASI,OAEd,4BAAQvB,UAAU,QAAQQ,QAASY,GAAnC,YCiDWI,MA3Df,WAAgB,IAAD,EACYC,mBAAS,CAClCC,EAAG,GACHX,QAAS,GACTI,SAAU,KAJG,mBACPQ,EADO,KACAC,EADA,KAMRC,EAAS,sDAmCf,OACC,yBAAK7B,UAAU,OACd,gCACC,gDAED,8BACC,kBAAC,EAAD,CAAQE,YA3BS,SAAA4B,GACnB,IAAIJ,EAAII,EAAEC,OAAOC,MACjBJ,GAAS,SAAAK,GACR,OAAO,2BAAKA,GAAZ,IAAuBP,EAAGA,QAwBStB,OAxCtB,SAAA0B,GACA,UAAVA,EAAEb,KACLiB,IAAML,EAAS,MAAQF,EAAMD,GAAGS,MAAK,YAAe,IAC/CpB,EAD8C,EAAXqB,KACpBxC,OACnBgC,GAAS,SAAAK,GACR,OAAO,2BACHA,GADJ,IAEClB,QAASA,aAkCX,kBAAC,EAAD,CAASA,QAASY,EAAMZ,QAASR,UAtBlB,SAAA8B,GACjBH,IAAML,EAAS,KAAOQ,GAAIF,MAAK,YAAe,IAEzC7B,EAFwC,EAAX8B,KAGjCR,GAAS,SAAAK,GACR,OAAO,2BAAKA,GAAZ,IAAuBd,SAAUb,aAkBD,oBAAxBqB,EAAMR,SAASN,OACtB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WAdlB,WAClBQ,GAAS,SAAAK,GACR,OAAO,2BAAKA,GAAZ,IAAuBd,SAAU,cC/BhBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2fb79898.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Search(props) {\n\treturn (\n\t\t<section>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Search for a movie...\"\n\t\t\t\tclassName=\"searchbox\"\n\t\t\t\tonChange={props.handleInput}\n\t\t\t\tonKeyPress={props.search}\n\t\t\t/>\n\t\t</section>\n\t);\n}\nexport default Search;\n","import React from \"react\";\n\nfunction Result({ result, openPopup }) {\n\treturn (\n\t\t<selection className=\"result\" onClick={() => openPopup(result.imdbID)}>\n\t\t\t<img src={result.Poster} alt=\"\" />\n\t\t\t<h3>{result.Title}</h3>\n\t\t</selection>\n\t);\n}\n\nexport default Result;\n","import React from \"react\";\nimport Result from \"./Result\";\n\nfunction Results({ results, openPopup }) {\n\treturn (\n\t\t<selection className=\"results\">\n\t\t\t{results.map(result => (\n\t\t\t\t<Result key={result.imdbID} result={result} openPopup={openPopup} />\n\t\t\t))}\n\t\t</selection>\n\t);\n}\n\nexport default Results;\n","import React from \"react\";\n\nfunction Popup({ selected, closePopup }) {\n\treturn (\n\t\t<section className=\"popup\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<h2>\n\t\t\t\t\t{selected.Title}\n\t\t\t\t\t<span>({selected.Year})</span>\n\t\t\t\t</h2>\n\t\t\t\t<p className=\"rating\">Rating: {selected.imdbRating}</p>\n\t\t\t\t<div className=\"plot\">\n\t\t\t\t\t<img src={selected.Poster} alt=\"\" />\n\t\t\t\t\t<p>{selected.Plot}</p>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"close\" onClick={closePopup}>\n\t\t\t\t\tClose\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n\nexport default Popup;\n","import React, { useState } from \"react\";\nimport Search from \"./components/Search\";\nimport Results from \"./components/Results\";\nimport axios from \"axios\";\nimport Popup from \"./components/Popup\";\nfunction App() {\n\tconst [state, setState] = useState({\n\t\ts: \"\",\n\t\tresults: [],\n\t\tselected: {}\n\t});\n\tconst apiUrl = \"http://www.omdbapi.com/?i=tt3896198&apikey=d320527f\";\n\tconst search = e => {\n\t\tif (e.key === \"Enter\") {\n\t\t\taxios(apiUrl + \"&s=\" + state.s).then(({ data }) => {\n\t\t\t\tlet results = data.Search;\n\t\t\t\tsetState(prevState => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...prevState,\n\t\t\t\t\t\tresults: results\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n\tconst handleInput = e => {\n\t\tlet s = e.target.value;\n\t\tsetState(prevState => {\n\t\t\treturn { ...prevState, s: s };\n\t\t});\n\t};\n\tconst openPopup = id => {\n\t\taxios(apiUrl + \"&i\" + id).then(({ data }) => {\n\t\t\t//  console.log(data);\n\t\t\tlet result = data;\n\t\t\tsetState(prevState => {\n\t\t\t\treturn { ...prevState, selected: result };\n\t\t\t});\n\t\t});\n\t};\n\n\tconst closePopup = () => {\n\t\tsetState(prevState => {\n\t\t\treturn { ...prevState, selected: {} };\n\t\t});\n\t};\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header>\n\t\t\t\t<h1>Movies Database</h1>\n\t\t\t</header>\n\t\t\t<main>\n\t\t\t\t<Search handleInput={handleInput} search={search} />\n\t\t\t\t<Results results={state.results} openPopup={openPopup} />\n\t\t\t\t{typeof state.selected.Title != \"undefined\" ? (\n\t\t\t\t\t<Popup selected={state.selected} closePopup={closePopup} />\n\t\t\t\t) : (\n\t\t\t\t\tfalse\n\t\t\t\t)}\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}